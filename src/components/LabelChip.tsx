import clsx from "clsx"

import { useLabels } from "@hooks"
import { useCursorPointer } from "@hooks/useCursorPointer"
import { Chip } from "@styled"

type LabelChipProps = {
  /** The elements to render within the span or button generated by LabelChip */
  children: string
  /** Wether or not the Label chip is currently being selected */
  active?: boolean
  /** Wether or not click actions are allowed on the LabelChip when it is a button */
  disabled?: boolean
  /** The action to execute when the LabelChip (button) is clicked */
  onClick?: (s: string) => void
  /** Wether or not an action of the LabelChip (button) is currently operating */
  working?: boolean
}

export function LabelChip({
  active,
  disabled,
  children: child,
  onClick,
  working
}: LabelChipProps) {
  const labelsQuery = useLabels()

  const { cursor, isInteractive, isNotInteractive } = useCursorPointer({
    clickable: !!onClick,
    disabled,
    working
  })

  if (labelsQuery.isSuccess) {
    const label = labelsQuery.data.find((label) => label.name === child)

    if (!label) {
      console.warn(
        `LabelChip could not find label using name='${child}' in the labels
        obtained from useLabels. Are you sure the provided name filter exists?`
      )

      return null
    }

    const props = {
      $as: isNotInteractive ? "span" : "button",
      $color: label.color,
      className: isInteractive
        ? clsx(
            "hover:border-yellow-600 hover:brightness-125",
            !!active && "border-yellow-600 brightness-200",
            cursor
          )
        : "",
      onClick
    }

    return <Chip {...props}>{child}</Chip>
  }

  return null
}
